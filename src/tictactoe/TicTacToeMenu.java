/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tictactoe;

import java.util.Random;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * Author: Jiaying Liu
 * Date: January 7 2013
 * Assignment: Tic Tac Toe 
 */
public class TicTacToeMenu extends javax.swing.JFrame {

       JButton[][] gamearray = new JButton[3][3];
      
    Random randomGenerator = new Random();
    /**
     * Creates new form TicTacToeMenu
     */
    public TicTacToeMenu() {
        initComponents();
        
        gamearray[0][0] = button1x1;
        gamearray[0][1] = button1x2;
        gamearray[0][2] = button1x3;
        gamearray[1][0] = button2x1;
        gamearray[1][1] = button2x2;
        gamearray[1][2] = button2x3;
        gamearray[2][0] = button3x1;
        gamearray[2][1] = button3x2;
        gamearray[2][2] = button3x3;
        
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Welcometxt = new javax.swing.JLabel();
        button1x1 = new javax.swing.JButton();
        button1x2 = new javax.swing.JButton();
        button1x3 = new javax.swing.JButton();
        button2x3 = new javax.swing.JButton();
        button3x3 = new javax.swing.JButton();
        button3x2 = new javax.swing.JButton();
        button2x2 = new javax.swing.JButton();
        button2x1 = new javax.swing.JButton();
        button3x1 = new javax.swing.JButton();
        rbEasy = new javax.swing.JRadioButton();
        rbMedium = new javax.swing.JRadioButton();
        rbHard = new javax.swing.JRadioButton();
        lblCompetitionStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Welcometxt.setForeground(new java.awt.Color(0, 0, 204));
        Welcometxt.setText(" Welcome to the game of TicTacToe!");

        button1x1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1x1ActionPerformed(evt);
            }
        });

        button1x2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1x2ActionPerformed(evt);
            }
        });

        button1x3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1x3ActionPerformed(evt);
            }
        });

        button2x3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2x3ActionPerformed(evt);
            }
        });

        button3x3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3x3ActionPerformed(evt);
            }
        });

        button3x2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3x2ActionPerformed(evt);
            }
        });

        button2x2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2x2ActionPerformed(evt);
            }
        });

        button2x1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2x1ActionPerformed(evt);
            }
        });

        button3x1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3x1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbEasy);
        rbEasy.setSelected(true);
        rbEasy.setText("Easy");
        rbEasy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEasyActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbMedium);
        rbMedium.setText("Medium");
        rbMedium.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMediumActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbHard);
        rbHard.setText("Hard");
        rbHard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbHardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 121, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCompetitionStatus, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(button2x1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                .addComponent(button1x1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                .addComponent(button3x1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                            .addComponent(rbEasy, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(button1x2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(button2x2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(button3x2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(rbMedium))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(button2x3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                .addComponent(button1x3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                .addComponent(button3x3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE))
                            .addComponent(rbHard)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Welcometxt, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)))
                .addGap(95, 95, 95))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(Welcometxt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEasy)
                    .addComponent(rbMedium)
                    .addComponent(rbHard))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(button1x2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(button1x3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(button1x1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button2x3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(button2x1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(button2x2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button3x3, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(button3x1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(button3x2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(lblCompetitionStatus)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button1x1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1x1ActionPerformed
        performMove(0, 0);
    }//GEN-LAST:event_button1x1ActionPerformed

    private void button1x2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1x2ActionPerformed
        performMove(0, 1);
    }//GEN-LAST:event_button1x2ActionPerformed

    private void button1x3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1x3ActionPerformed
        performMove(0, 2);
    }//GEN-LAST:event_button1x3ActionPerformed

    private void button2x3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2x3ActionPerformed
        performMove(1, 2);
    }//GEN-LAST:event_button2x3ActionPerformed

    private void button3x3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3x3ActionPerformed
        performMove(2, 2);
    }//GEN-LAST:event_button3x3ActionPerformed

    private void button3x2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3x2ActionPerformed
        performMove(2, 1);
    }//GEN-LAST:event_button3x2ActionPerformed

    private void button2x2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2x2ActionPerformed
        performMove(1, 1);
      
    }//GEN-LAST:event_button2x2ActionPerformed

    private void button2x1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2x1ActionPerformed
        performMove(1, 0);

    }//GEN-LAST:event_button2x1ActionPerformed

    private void button3x1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3x1ActionPerformed
        performMove(2, 0);
        
    }//GEN-LAST:event_button3x1ActionPerformed

    private void rbHardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbHardActionPerformed
        clearbuttons();
    }//GEN-LAST:event_rbHardActionPerformed

    private void rbEasyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEasyActionPerformed
        clearbuttons();
    }//GEN-LAST:event_rbEasyActionPerformed

    private void rbMediumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMediumActionPerformed
        clearbuttons();
    }//GEN-LAST:event_rbMediumActionPerformed
    
    private void clearbuttons(){
        for(int x=0; x<3; x++){
            for(int y=0; y<3; y++){
                gamearray[x][y].setText("");
            }
        }
    }
    
    /* 
    performMove decides computer moves based on the difficulty settings
    firstnum = row number which user select
    secondnum = column number which user select
    */
    private void performMove(int rownum, int columnnum) {
        if (rbEasy.isSelected()) {
            easybuttonactions(rownum, columnnum);
        } else if (rbMedium.isSelected()) {
            mediumActions(rownum, columnnum);
        } else {
            hardestActions(rownum, columnnum);
        }
        //Checking the game result
        
        boolean UserWin= IsUserWin();
        boolean ComputerWin= false;
        if(!UserWin){
          
            ComputerWin=IsComputerWin();
           
        }
        //System.err.println(ComputerWin);
        //System.err.println(UserWin);
        if((!UserWin)&&(!ComputerWin)){
          //  System.err.println("Tied");
        IsItTied();
    }
    }
/* 
 this method decides the computer moves in the easiest difficulty
     firstnum = row number which user select 
    secondnum = column number which user select
     */
    private void easybuttonactions(int firstnum, int secondnum) {
       
        //user button
        JButton button = gamearray[firstnum][secondnum];

        if (button.getText() == "X") {
        } else if (button.getText() == "O") {
        } else {
            //set text for user
            button.setText("X");
            randomComputermove();
         
        }
    }
    private void randomComputermove(){
         //set text for computer
          //Do nothing if no space left
            if(HasanyVacant()==false){
              return;
            }
            //choose random space for computer
            int row = randomGenerator.nextInt(3);
            int column = randomGenerator.nextInt(3);
            while (gamearray[row][column].getText() == "X" || gamearray[row][column].getText() == "O") {
                row = randomGenerator.nextInt(3);
                column = randomGenerator.nextInt(3);
            }
            gamearray[row][column].setText("O");
    }
//This method decides the computer move in medium difficulty
    private void mediumActions(int firstnum, int secondnum) {
        JButton button = gamearray[firstnum][secondnum];
//do nothing if button already has X or O on it
        if (button.getText() == "X") {
        } else if (button.getText() == "O") {
        } else {
            //user button
            button.setText("X");
            
            //computer button
            //first try to block user
          boolean foundblockspace= computerBlockMove();
          //otherwise random
           if(!foundblockspace){
                randomComputermove();
          
            }
        }
        
   
    }
    //This method tells the computer to block the user if the user can win
     private boolean computerBlockMove(){
         
         boolean found=false;
         int row=-1;
         int column=-1;
            if ((gamearray[0][0].getText()=="")&&
                    (
                    (gamearray[0][1].getText() == "X" && gamearray[0][2].getText() == "X")
                    || (gamearray[1][0].getText() == "X" && gamearray[2][0].getText() == "X")
                    || (gamearray[2][2].getText() == "X" && gamearray[1][1].getText() == "X"))
                    ){
                row = 0;
                column = 0;
            } else if ((gamearray[0][1].getText()=="")&&
                    (
                    (gamearray[0][0].getText() == "X" && gamearray[0][2].getText() == "X")
                    || (gamearray[1][1].getText() == "X" && gamearray[2][1].getText() == "X")) 
                    ){
                row = 0;
                column = 1;
            } else if ((gamearray[0][2].getText()=="")&&
                    (
                    (gamearray[0][0].getText() == "X" && gamearray[0][1].getText() == "X")
                    || (gamearray[2][0].getText() == "X" && gamearray[1][1].getText() == "X")
                    || (gamearray[2][2].getText() == "X" && gamearray[1][2].getText() == "X")) 
                    ){
                row = 0;
                column = 2;
            } else if ((gamearray[1][0].getText()=="")&&
                    (
                    (gamearray[0][0].getText() == "X" && gamearray[2][0].getText() == "X")
                    || (gamearray[1][1].getText() == "X" && gamearray[1][2].getText() == "X")) 
                    ){
                row = 1;
                column = 0;
            } else if ((gamearray[1][1].getText()=="")&&
                    (
                    (gamearray[0][0].getText() == "X" && gamearray[2][2].getText() == "X")
                    || (gamearray[1][0].getText() == "X" && gamearray[1][2].getText() == "X")
                    || (gamearray[0][1].getText() == "X" && gamearray[2][1].getText() == "X")
                    || (gamearray[2][0].getText()=="X"&&gamearray[0][2].getText()=="X"))
                    ){
                row = 1;
                column = 1;
            } else if ((gamearray[1][2].getText()=="")&&
                    (
                    (gamearray[0][2].getText() == "X" && gamearray[2][2].getText() == "X")
                    || (gamearray[1][0].getText() == "X" && gamearray[1][1].getText() == "X")) 
                    ){
                row = 1;
                column = 2;
            } else if ((gamearray[2][0].getText()=="")&&
                    (
                    (gamearray[0][0].getText() == "X" && gamearray[1][0].getText() == "X")
                    || (gamearray[1][1].getText() == "X" && gamearray[0][2].getText() == "X")
                    || (gamearray[2][1].getText() == "X" && gamearray[2][2].getText() == "X")) 
                    ){
                row = 2;
                column = 0;
            } else if ((gamearray[2][1].getText()=="")&&
                    (
                    (gamearray[1][1].getText() == "X" && gamearray[0][1].getText() == "X")
                    || (gamearray[2][0].getText() == "X" && gamearray[2][2].getText() == "X")) 
                    ){
                row = 2;
                column = 1;
            } else if ((gamearray[2][2].getText()=="")&&
                    (
                    (gamearray[0][2].getText() == "X" && gamearray[1][2].getText() == "X")
                    || (gamearray[1][1].getText() == "X" && gamearray[0][0].getText() == "X")
                    || (gamearray[2][0].getText() == "X" && gamearray[2][1].getText() == "X")) 
                    ){
                row = 2;
                column = 2;
                
            
     }
            if(row!=-1&&column!=-1){
                gamearray[row][column].setText("O");
                found=true;
            }
            return found;
     }
     //another way to check the block position. unfinised.
    private boolean computerBlockMove2(){
         
         boolean found=false;
         int row=-1;
         int column=-1;
         
         for (int rownum=0;rownum<3;rownum++)
         {
             for (int colnum=0;colnum<3;colnum++){
                 if (gamearray[rownum][colnum].getText()=="" &&
                      (
                         ((colnum+1)>=0 && (colnum+1)<3 && (colnum+2)>=0 && (colnum+2)<3 && gamearray[rownum][colnum+1].getText()=="X"&& gamearray[rownum][colnum+2].getText()=="X")
                     ||  ((colnum-1)<3 && (colnum+1)<3 && gamearray[rownum][colnum-1].getText()=="X"&& gamearray[rownum][colnum+1].getText()=="X")
                     ||  ((colnum-2)>0  && (colnum-2)<3  && (colnum-1)<3 && gamearray[rownum][colnum-2].getText()=="X"&& gamearray[rownum][colnum-1].getText()=="X")  
                     ||    ((rownum+1)>=0 && (rownum+1)<3 && (rownum+2)>=0 && (rownum+2)<3 && gamearray[rownum+1][colnum].getText()=="X"&& gamearray[rownum+2][colnum].getText()=="X")
                     ||  ((colnum-1)<3 && (colnum+1)<3 && gamearray[rownum][colnum-1].getText()=="X"&& gamearray[rownum][colnum+1].getText()=="X")
                     ||  ((colnum-2)>0  && (colnum-2)<3  && (colnum-1)<3 && gamearray[rownum][colnum-2].getText()=="X"&& gamearray[rownum][colnum-1].getText()=="X")  
                      
                         )

                    )
                 {
                     row=rownum;
                      column=colnum;
                     }
             }
         }
           
            
     
            if(row!=-1&&column!=-1){
                gamearray[row][column].setText("O");
                found=true;
            }
            return found;
     }
       
//This method decides the computer moves in the hardest difficulty
    private void hardestActions(int firstnum, int secondnum) {
        JButton button = gamearray[firstnum][secondnum];
//if button already has text on it do nothing
        if (button.getText() == "X") {
        } else if (button.getText() == "O") {
        } else {
            
            button.setText("X");
           

            int row = -1;
            int column = -1;
//First computer tries to win if it sees opportinuty 
               boolean foundwinmove=ComputerWinMove();
//If no opportunity to win is available, checks to see if there is opportinuty to block and tries to           
          if(!foundwinmove){
              boolean foundblockmove=computerBlockMove();
         
        //otherwise random move
            if(!foundblockmove){
                randomComputermove();  
                    }
          }
    }
    }
    
    //This method tells the computer what to do if there is an opportunity to win
    private boolean ComputerWinMove(){
        boolean found=false;
        int row = -1;
            int column = -1;

            if ((gamearray[0][0].getText()=="")
                    &&
                    (
                   (gamearray[0][1].getText() == "O" && gamearray[0][2].getText() == "O")
                   || (gamearray[1][0].getText() == "O" && gamearray[2][0].getText() == "O")
                   || (gamearray[2][2].getText() == "O" && gamearray[1][1].getText() == "O"))
                    ) {
              
                row = 0;
                column = 0;
            } else if ((gamearray[0][1].getText()=="")&&
                    (
                    (gamearray[0][0].getText() == "O" && gamearray[0][2].getText() == "O")
                    || (gamearray[1][1].getText() == "O" && gamearray[2][1].getText() == "O")) ){
               
                row = 0;
                column = 1;
             
                }
           else if ((gamearray[0][2].getText()=="")&&
                    ((gamearray[0][0].getText() == "O" && gamearray[0][1].getText() == "O")
                    || (gamearray[2][0].getText() == "O" && gamearray[1][1].getText() == "O")
                    || (gamearray[2][2].getText() == "O" && gamearray[1][2].getText() == "O"))
                    ){
                
                row = 0;
                column = 2;
            } else if ((gamearray[1][0].getText()=="")&&
                    (
            (gamearray[0][0].getText() == "O" && gamearray[2][0].getText() == "O")
                    || (gamearray[1][1].getText() == "O" && gamearray[1][2].getText() == "O")) 
                    ){
                
                row = 1;
                column = 0;
            } else if ((gamearray[1][1].getText()=="")&&
                    ((gamearray[0][0].getText() == "O" && gamearray[2][2].getText() == "O")
                    || (gamearray[1][0].getText() == "O" && gamearray[1][2].getText() == "O")
                    || (gamearray[0][1].getText() == "O" && gamearray[2][1].getText() == "O")
                    ||(gamearray[2][0].getText()=="O")&&(gamearray[0][2].getText()=="O")) 
                    ){
                
                row = 1;
                column = 1;
            } else if ((gamearray[1][2].getText()=="")&&
                    (
                    (gamearray[0][2].getText() == "O" && gamearray[2][2].getText() == "O")
                    || (gamearray[1][0].getText() == "O" && gamearray[1][1].getText() == "O")) 
                    ){
             
                row = 1;
                column = 2;
            } else if ((gamearray[2][0].getText()=="")&&
                    (
                    (gamearray[0][0].getText() == "O" && gamearray[1][0].getText() == "O")
                    || (gamearray[1][1].getText() == "O" && gamearray[0][2].getText() == "O")
                    || (gamearray[2][1].getText() == "O" && gamearray[2][2].getText() == "O")) 
                    ){
              
                row = 2;
                column = 0;
            } else if ((gamearray[2][1].getText()=="")&&
                    (
                     (gamearray[1][1].getText() == "O" && gamearray[0][1].getText() == "O")
                    || (gamearray[2][0].getText() == "O" && gamearray[2][2].getText() == "O")) 
                    ){
              
                row = 2;
                column = 1;
            } else if ((gamearray[2][2].getText()=="")&&
                    (
                     (gamearray[0][2].getText() == "O" && gamearray[1][2].getText() == "O")
                    || (gamearray[1][1].getText() == "O" && gamearray[0][0].getText() == "O")
                    || (gamearray[2][0].getText() == "O" && gamearray[2][1].getText() == "O")) 
                    ){
            
                row = 2;
                column = 2;
            }
            if(row!=-1&&column!=-1){
                gamearray[row][column].setText("O");
                found=true;
            }
            return found;
    }
//This method checks to see if either the user or the computer won the game
    private boolean IsWin(String mark) {
        for (int a = 0; a < 3; a++) {
            if (gamearray[a][0].getText().equals(mark)
                    && gamearray[a][1].getText().equals(mark)
                    && gamearray[a][2].getText().equals(mark)) {
                return true;
            }
        }

        for (int a = 0; a < 3; a++) {
            if (gamearray[0][a].getText().equals(mark)
                    && gamearray[1][a].getText().equals(mark)
                    && gamearray[2][a].getText().equals(mark)) {
                return true;
            }
        }

        if (gamearray[0][0].getText().equals(mark)
                && gamearray[1][1].getText().equals(mark)
                && gamearray[2][2].getText().equals(mark)) {
            return true;
        }
        if (gamearray[0][2].getText().equals(mark)
                && gamearray[1][1].getText().equals(mark)
                && gamearray[2][0].getText().equals(mark)) {
            return true;
        }


        return false;

    }
    int back;
//This method checks if the user wins
    private boolean IsUserWin() {
        boolean v = IsWin("X");
        //if the user wins then a message will be shown to give him or her the option to play again
        if (v) {
            back = JOptionPane.showConfirmDialog(null, "Congratulations Player, you won! Would you like to play again?", "Play Again?", JOptionPane.YES_NO_OPTION);
            //if user selects yes then the text will empty allowing user to play again
            if (back == JOptionPane.YES_OPTION) {
                for (int x = 0; x < 3; x++) {
                    for (int y = 0; y < 3; y++) {
                        gamearray[x][y].setText("");
                    }
                }
            }
        }
        return v;
    }
//This method checks if the computer wins
    private boolean IsComputerWin() {
        boolean v = IsWin("O");
        //if the computer wins a message will be shown to give user option to play again
        if (v) {
            back = JOptionPane.showConfirmDialog(null, "Sorry you lost. Would you like to play again?", "Play Again?", JOptionPane.YES_NO_OPTION);
            //if user says yes the game will restart
            if (back == JOptionPane.YES_OPTION) {
                for (int x = 0; x < 3; x++) {
                    for (int y = 0; y < 3; y++) {
                        gamearray[x][y].setText("");
                    }
                }
            }
        }
        return v;
    }
//This method checks if there are any remaining empty spaces left in the game
    private boolean HasanyVacant() {
        for (int j = 0; j < 3; j++) {
            for (int k = 0; k < 3; k++) {
                if (gamearray[j][k].getText().equals("")) {
                    return true;
                }
            }
        }
        return false;
    }
//This method checks if there is a tie in the game
    private boolean IsItTied(){
        //if there is no space left and no one won the user is given option to play again
        if(HasanyVacant()==false){
            back=JOptionPane.showConfirmDialog(null, "There is a tie. Would you like to play again?", "Play Again?", JOptionPane.YES_NO_OPTION);
            //if user says yes then the game will restart
            if(back==JOptionPane.YES_OPTION){
                for(int x=0;x<3;x++){
                    for(int y=0;y<3;y++){
                        gamearray[x][y].setText("");
                    }
                }
            }
        }
        return HasanyVacant();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToeMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacToeMenu().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Welcometxt;
    private javax.swing.JButton button1x1;
    private javax.swing.JButton button1x2;
    private javax.swing.JButton button1x3;
    private javax.swing.JButton button2x1;
    private javax.swing.JButton button2x2;
    private javax.swing.JButton button2x3;
    private javax.swing.JButton button3x1;
    private javax.swing.JButton button3x2;
    private javax.swing.JButton button3x3;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel lblCompetitionStatus;
    private javax.swing.JRadioButton rbEasy;
    private javax.swing.JRadioButton rbHard;
    private javax.swing.JRadioButton rbMedium;
    // End of variables declaration//GEN-END:variables
}
